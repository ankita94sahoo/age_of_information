# -*- coding: utf-8 -*-
"""random_static_uniform_delay.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mybnQGMpr3Ok_PK5R5s4yOZkk0VsHuEu
"""

import numpy as np
import pandas as pd
import seaborn as sns
import datetime as dt
import matplotlib.pyplot as plt
from fbprophet import Prophet
from sklearn.metrics import mean_squared_error, mean_absolute_error
plt.style.use('fivethirtyeight') # For plots

pjme = pd.read_csv('./dataset/PJME_hourly.csv',
                   index_col=[0], parse_dates=[0]) # We set the index column and know it has dates

print(pjme.head(5))



# Color pallete for plotting
color_pal = ["#F8766D", "#D39200", "#93AA00",
             "#00BA38", "#00C19F", "#00B9E3",
             "#619CFF", "#DB72FB"]
pjme.plot(style='.', figsize=(15,5), color=color_pal[0], title='PJM East')
plt.show()

pjme['Delayed_Time']= pjme.index.copy()


# pjme['Delayed_Time'][1] = pjme['Delayed_Time'][1] + dt.rin

#rand_int = np.random.randint(1,30,size=145366) #random delay 
#static_int = 30 #to calculate static delay
rand_int = np.random.uniform(1,10,size=145366) #uniform delay
pjme['rand_int'] = rand_int
#pjme['static_int'] = static_int
pjme.head(5)

# pjme['rand_date'] = pd.to_datetime(pjme['rand_int'], format='%H')
# pjme.head(5)

# pjme['hour'] = pjme['rand_date'].dt.hour
# pjme.head()

pjme.head(5)

pjme['Delayed_Time'] = pjme.Delayed_Time + pjme.rand_int.astype('timedelta64[h]')
pjme.head(5)

pjme.set_index('Delayed_Time')

pjme_delayed = pjme.set_index('Delayed_Time')

pjme_delayed = pjme_delayed.drop(['rand_int'],axis=1)

pjme_delayed.to_csv(r'./dataset/PJME_hourly_delayed.csv')

"""## Running the Model"""

def create_features(df, label=None):
    """
    Creates time series features from datetime index.
    """
    df = df.copy()
    df['date'] = df.index
    df['hour'] = df['date'].dt.hour
    df['dayofweek'] = df['date'].dt.dayofweek
    df['quarter'] = df['date'].dt.quarter
    df['month'] = df['date'].dt.month
    df['year'] = df['date'].dt.year
    df['dayofyear'] = df['date'].dt.dayofyear
    df['dayofmonth'] = df['date'].dt.day
    df['weekofyear'] = df['date'].dt.weekofyear
    
    X = df[['hour','dayofweek','quarter','month','year',
           'dayofyear','dayofmonth','weekofyear']]
    if label:
        y = df[label]
        return X, y
    return X

X, y = create_features(pjme_delayed, label='PJME_MW')

features_and_target = pd.concat([X, y], axis=1)

# See our features and target
features_and_target.head()

"""Plotting the Features to see trends
1. Power demand has strong daily and seasonal properties.
2. Day of week also seems to show differences in peaks
"""

sns.pairplot(features_and_target.dropna(),
             hue='hour',
             x_vars=['hour','dayofweek',
                     'year','weekofyear'],
             y_vars='PJME_MW',
             height=5,
             plot_kws={'alpha':0.15, 'linewidth':0}
            )
plt.suptitle('Power Use MW by Hour, Day of Week, Year and Week of Year')
plt.show()

"""## Train/Test Split"""

#Splitting the Fresh dataset
split_date = '01-Jan-2015'
pjme_train_fresh = pjme.loc[pjme.index <= split_date].copy()
pjme_test_fresh = pjme.loc[pjme.index > split_date].copy()

#Splitting the Delayed dataset
split_date = '01-Jan-2015'
pjme_train_delayed = pjme_delayed.loc[pjme_delayed.index <= split_date].copy()
pjme_test_delayed= pjme_delayed.loc[pjme_delayed.index > split_date].copy()

"""## ERROR Metrics"""

def mean_absolute_percentage_error(y_true, y_pred): 
    """Calculates MAPE given y_true and y_pred"""
    y_true, y_pred = np.array(y_true), np.array(y_pred)
    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100

"""## Simple Prophet Model

**Case 1: Train on Fresh and Test on Fresh**
"""

# Format data for prophet model using ds and y
pjme_train_fresh.reset_index() \
    .rename(columns={'Datetime':'ds',
                     'PJME_MW':'y'}).head()

# Setup and train model and fit
model = Prophet()
model.fit(pjme_train_fresh.reset_index() \
              .rename(columns={'Datetime':'ds',
                               'PJME_MW':'y'}))

# Predict on testing set with model (Fresh Dataset)
pjme_test_fcst = model.predict(df=pjme_test_fresh.reset_index() \
                                   .rename(columns={'Datetime':'ds'}))

pjme_test_fcst.head()

# Plot the forecast
f, ax = plt.subplots(1)
f.set_figheight(5)
f.set_figwidth(15)
fig = model.plot(pjme_test_fcst,
                 ax=ax)
plt.show()

mean_squared_error(y_true=pjme_test_fresh['PJME_MW'],
                   y_pred=pjme_test_fcst['yhat'])

mean_absolute_error(y_true=pjme_test_fresh['PJME_MW'],
                   y_pred=pjme_test_fcst['yhat'])

mean_absolute_percentage_error(y_true=pjme_test_fresh['PJME_MW'],
                   y_pred=pjme_test_fcst['yhat'])

"""**Case 2: Train on Delayed dataset and test on Fresh Dataset**"""

# Format data for prophet model using ds and y
pjme_train_delayed.reset_index() \
    .rename(columns={'Delayed_Time':'ds',
                     'PJME_MW':'y'}).head()

# Setup and train model and fit
model = Prophet()
model.fit(pjme_train_delayed.reset_index() \
              .rename(columns={'Delayed_Time':'ds',
                               'PJME_MW':'y'}))

# Predict on testing set with model (Fresh Dataset)
pjme_test_fcst = model.predict(df=pjme_test_fresh.reset_index() \
                                   .rename(columns={'Datetime':'ds'}))

pjme_test_fcst.head()

# Plot the forecast
f, ax = plt.subplots(1)
f.set_figheight(5)
f.set_figwidth(15)
fig = model.plot(pjme_test_fcst,
                 ax=ax)
plt.show()

mean_squared_error(y_true=pjme_test_fresh['PJME_MW'],
                   y_pred=pjme_test_fcst['yhat'])

mean_absolute_error(y_true=pjme_test_fresh['PJME_MW'],
                   y_pred=pjme_test_fcst['yhat'])

mean_absolute_percentage_error(y_true=pjme_test_fresh['PJME_MW'],
                   y_pred=pjme_test_fcst['yhat'])

"""**Case 3: Train on Fresh dataset and test on Delayed Dataset**"""

# Format data for prophet model using ds and y
pjme_train_fresh.reset_index() \
    .rename(columns={'Datetime':'ds',
                     'PJME_MW':'y'}).head()

# Setup and train model and fit
model = Prophet()
model.fit(pjme_train_fresh.reset_index() \
              .rename(columns={'Datetime':'ds',
                               'PJME_MW':'y'}))

# Predict on testing set with model (Delayed Dataset)
pjme_test_fcst = model.predict(df=pjme_test_delayed.reset_index() \
                                   .rename(columns={'Delayed_Time':'ds'}))

pjme_test_fcst.head()

# Plot the forecast
f, ax = plt.subplots(1)
f.set_figheight(5)
f.set_figwidth(15)
fig = model.plot(pjme_test_fcst,
                 ax=ax)
plt.show()

mean_squared_error(y_true=pjme_test_delayed['PJME_MW'],
                   y_pred=pjme_test_fcst['yhat'])

mean_absolute_error(y_true=pjme_test_delayed['PJME_MW'],
                   y_pred=pjme_test_fcst['yhat'])

mean_absolute_percentage_error(y_true=pjme_test_delayed['PJME_MW'],
                   y_pred=pjme_test_fcst['yhat'])